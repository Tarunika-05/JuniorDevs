# nodes/engineer_node.py
import json
from langsmith import traceable
from agents.engineer_agent import EngineerAgent

engineer = EngineerAgent()

@traceable(name="Engineer Node")
def engineer_node(state: dict) -> dict:
    print(f"🔁 Retry Count: {state['retry_count']}")

    if state["retry_count"] >= 3:
        return {
            **state,
            "stop_reason": "max_retries"
        }

    task = state["task"]
    previous_code = state.get("code", "")
    feedback = state.get("feedback", "")

    print("\n👨‍💻 [Engineer Node] Invoked")
    print(f"📝 Task: {task}")
    if previous_code:
        print(f"🔁 Previous Code:\n{previous_code}")
    if feedback:
        print(f"💬 Feedback from previous run: {feedback}")

    try:
        result = engineer.generate_code(
            task=task,
            previous_code=previous_code,
            feedback=feedback
        )
        print("✅ Code generated by Engineer:")
        print(result.get("code", ""))
        print(f"🧪 Sample Input: {result.get('sample_input', '')}")
        print(f"🗃️ Language: {result.get('language', 'unknown')}")
    except json.JSONDecodeError:
        print("❌ Failed to parse EngineerAgent's response.")
        return {
            **state,
            "code": str(previous_code) or "",
            "language": "unknown",
            "input": "",
            "retry_count": state["retry_count"] + 1
        }

    return {
        **state,
        "code": result.get("code", ""),
        "language": result.get("language", "unknown"),
        "input": result.get("sample_input", ""),
        "retry_count": state["retry_count"] + 1,
        "error": "",
        "output": "",
        "feedback": "",
        "is_correct": False,
        "is_verified": False,
    }
